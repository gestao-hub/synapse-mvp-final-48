// ... existing imports ...

export const RealSimulationEngine = ({ 
  scenario,
  userRole,
  onComplete,
  sessionId
}: RealSimulationEngineProps) => {
  // ... existing state and refs ...

  const endSimulation = async () => {
    try {
      console.log('üöÄ Iniciando processo de finaliza√ß√£o da simula√ß√£o:', {
        sessionId,
        scenarioId: scenario.id,
        conversationLength: conversation.length
      });

      const userTranscript = conversation
        .filter(msg => msg.role === 'user')
        .map(msg => msg.content)
        .join('\n')
      
      const aiTranscript = conversation
        .filter(msg => msg.role === 'assistant')
        .map(msg => msg.content)
        .join('\n')

      console.log('üìù Transcri√ß√µes geradas:', {
        userTranscriptLength: userTranscript.length,
        aiTranscriptLength: aiTranscript.length,
        firstUserMessage: userTranscript.slice(0, 100) + '...',
        firstAiMessage: aiTranscript.slice(0, 100) + '...'
      });

      const metrics = await MetricsCalculator.calculate(
        conversation.map(c => ({
          speaker: c.role === 'user' ? 'user' : 'ai',
          content: c.content,
          timestamp: new Date(c.timestamp).getTime()
        })),
        scenario.area,
        scenario.criteria || []
      );

      console.log('üìä M√©tricas calculadas:', {
        overallScore: metrics.overallScore,
        speechMetrics: metrics.speechMetrics,
        contentMetrics: metrics.contentMetrics
      });

      const sessionUpdate = {
        duration_ms: Date.now() - (conversation[0] ? new Date(conversation[0].timestamp).getTime() : Date.now()),
        transcript_user: userTranscript || null,
        transcript_ai: aiTranscript || null,
        completed_at: new Date().toISOString(),
        metadata: {
          scenario_title: scenario.title,
          scenario_id: scenario.id,
          user_role: userRole,
          overall_score: metrics.overallScore,
          total_turns: conversation.length,
          metrics: metrics,
          completed: true,
          conversation_length: conversation.length,
          criteria: scenario.criteria
        }
      };

      console.log('üíæ Tentando salvar dados da sess√£o:', {
        sessionId,
        update: sessionUpdate
      });

      const { error: updateError } = await supabase
        .from('sessions_live')
        .update(sessionUpdate)
        .eq('id', sessionId)

      if (updateError) {
        console.error('‚ùå Erro ao finalizar sess√£o:', updateError);
        throw new Error(`Falha ao atualizar sess√£o: ${updateError.message}`);
      }

      console.log('‚úÖ Sess√£o finalizada com sucesso');

      // Chamar an√°lise da sess√£o
      console.log("üîç Iniciando an√°lise da sess√£o:", sessionId, "√°rea:", scenario.area);
      
      try {
        const analysisResult = await supabase.functions.invoke('score-session-by-area', {
          body: { 
            sessionId, 
            area: scenario.area,
            metrics: metrics
          }
        });
        
        if (analysisResult.error) {
          console.error('‚ùå Erro na an√°lise:', analysisResult.error);
          throw new Error(`Falha na an√°lise: ${analysisResult.error}`);
        }
        
        console.log("‚úÖ An√°lise conclu√≠da:", analysisResult.data);
        
      } catch (error) {
        console.error('‚ùå Erro ao chamar an√°lise:', error);
      }

      const finalResults = {
        sessionId,
        scenario,
        userRole,
        conversation,
        scores: metrics,
        totalTurns: conversation.length,
        overallScore: metrics.overallScore,
        duration: Math.round((Date.now() - Date.parse(conversation[0]?.timestamp)) / 1000 / 60)
      };

      console.log('üèÅ Resultados finais da simula√ß√£o:', finalResults);

      onComplete(finalResults);
      
    } catch (error) {
      console.error('‚ùå Erro fatal ao finalizar simula√ß√£o:', error);
      toast({
        title: "Erro na Finaliza√ß√£o",
        description: "Ocorreu um erro ao finalizar a simula√ß√£o. Por favor, tente novamente.",
        variant: "destructive"
      });
    }
  };

  // ... resto do c√≥digo existente ...
};